AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Application. This template is partially managed by Amazon.Lambda.Annotations (v1.3.0.0).
Parameters:
  SendEmailTopicArn:
    Type: String
    Description: ARN of the Send Email topic
  FullAccessRoleArn:
    Type: String
    Description: ARN of the FullAccess IAM role
Resources:
  IdentityApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "http://localhost:5173"
        AllowHeaders:
          - authorization
          - content-type
          - host
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        MaxAge: 600
        AllowCredentials: true
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
      Auth:
        DefaultAuthorizer: LambdaAuthorizer
        Authorizers:
          LambdaAuthorizer:
            FunctionArn: !GetAtt LambdaAuthorizer.Arn
            AuthorizerPayloadFormatVersion: '2.0'
            EnableSimpleResponses: true
            Identity:
              Headers:
                - authorization
  Login:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
        - RootPost
    Properties:
      FunctionName: Login
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 3008
      EphemeralStorage:
        Size: 3008
      Timeout: 30
      Role: !Ref FullAccessRoleArn
      PackageType: Zip
      Handler: Identity.Functions::Identity.Functions.Functions.Auth.AuthFunctions_Login_Generated::Login
      Events:
        RootPost:
          Type: HttpApi
          Properties:
            Path: /api/v1/auth/login
            Method: POST
            ApiId: !Ref IdentityApi
            Auth:
              Authorizer: NONE
  Register:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
        - RootPost
    Properties:
      FunctionName: Register
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 3008
      EphemeralStorage:
        Size: 3008
      Timeout: 30
      Role: !Ref FullAccessRoleArn
      PackageType: Zip
      Handler: Identity.Functions::Identity.Functions.Functions.Auth.AuthFunctions_Register_Generated::Register
      Events:
        RootPost:
          Type: HttpApi
          Properties:
            Path: /api/v1/auth/register
            Method: POST
            ApiId: !Ref IdentityApi
            Auth:
              Authorizer: NONE
  VerifyEmail:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
        - RootPut
    Properties:
      FunctionName: VerifyEmail
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 3008
      EphemeralStorage:
        Size: 3008
      Timeout: 30
      Role: !Ref FullAccessRoleArn
      PackageType: Zip
      Handler: Identity.Functions::Identity.Functions.Functions.Auth.AuthFunctions_VerifyEmail_Generated::VerifyEmail
      Events:
        RootPut:
          Type: HttpApi
          Properties:
            Path: /api/v1/auth/verify-email
            Method: PUT
            ApiId: !Ref IdentityApi
            Auth:
              Authorizer: NONE
  ResendEmail:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
        - RootPut
    Properties:
      FunctionName: ResendEmail
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 3008
      EphemeralStorage:
        Size: 3008
      Timeout: 30
      Role: !Ref FullAccessRoleArn
      PackageType: Zip
      Handler: Identity.Functions::Identity.Functions.Functions.Auth.AuthFunctions_ResendEmail_Generated::ResendEmail
      Events:
        RootPut:
          Type: HttpApi
          Properties:
            Path: /api/v1/auth/resend-email
            Method: PUT
            ApiId: !Ref IdentityApi
            Auth:
              Authorizer: NONE
  Refresh:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
        - RootPut
    Properties:
      FunctionName: Refresh
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 3008
      EphemeralStorage:
        Size: 3008
      Timeout: 30
      Role: !Ref FullAccessRoleArn
      PackageType: Zip
      Handler: Identity.Functions::Identity.Functions.Functions.Auth.AuthFunctions_Refresh_Generated::Refresh
      Events:
        RootPut:
          Type: HttpApi
          Properties:
            Path: /api/v1/auth/refresh
            Method: PUT
            ApiId: !Ref IdentityApi
            Auth:
              Authorizer: NONE
  ForgotPassword:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
        - RootPut
    Properties:
      FunctionName: ForgotPassword
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 3008
      EphemeralStorage:
        Size: 3008
      Timeout: 30
      Role: !Ref FullAccessRoleArn
      PackageType: Zip
      Handler: Identity.Functions::Identity.Functions.Functions.Auth.AuthFunctions_ForgotPassword_Generated::ForgotPassword
      Events:
        RootPut:
          Type: HttpApi
          Properties:
            Path: /api/v1/auth/forgot-password/request
            Method: PUT
            ApiId: !Ref IdentityApi
            Auth:
              Authorizer: NONE
  NewPassword:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
        - RootPut
    Properties:
      FunctionName: NewPassword
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 3008
      EphemeralStorage:
        Size: 3008
      Timeout: 30
      Role: !Ref FullAccessRoleArn
      PackageType: Zip
      Handler: Identity.Functions::Identity.Functions.Functions.Auth.AuthFunctions_NewPassword_Generated::NewPassword
      Events:
        RootPut:
          Type: HttpApi
          Properties:
            Path: /api/v1/auth/forgot-password/new
            Method: PUT
            ApiId: !Ref IdentityApi
            Auth:
              Authorizer: NONE
  GetUser:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
        - RootGet
    Properties:
      FunctionName: GetUser
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 3008
      EphemeralStorage:
        Size: 3008
      Timeout: 30
      Role: !Ref FullAccessRoleArn
      PackageType: Zip
      Handler: Identity.Functions::Identity.Functions.Functions.User.UserFunctions_GetUser_Generated::GetUser
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /api/v1/user
            Method: GET
            ApiId: !Ref IdentityApi
  UpdateUser:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
        - RootPut
    Properties:
      FunctionName: UpdateUser
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 3008
      EphemeralStorage:
        Size: 3008
      Timeout: 30
      Role: !Ref FullAccessRoleArn
      PackageType: Zip
      Handler: Identity.Functions::Identity.Functions.Functions.User.UserFunctions_UpdateUser_Generated::UpdateUser
      Events:
        RootPut:
          Type: HttpApi
          Properties:
            Path: /api/v1/user
            Method: PUT
            ApiId: !Ref IdentityApi
  RequestEmailChange:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
        - RootPut
    Properties:
      FunctionName: RequestEmailChange
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 3008
      EphemeralStorage:
        Size: 3008
      Timeout: 30
      Role: !Ref FullAccessRoleArn
      PackageType: Zip
      Handler: Identity.Functions::Identity.Functions.Functions.User.UserFunctions_RequestEmailChange_Generated::RequestEmailChange
      Events:
        RootPut:
          Type: HttpApi
          Properties:
            Path: /api/v1/user/change-email
            Method: PUT
            ApiId: !Ref IdentityApi
  Logout:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
        - RootPut
    Properties:
      FunctionName: Logout
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 3008
      EphemeralStorage:
        Size: 3008
      Timeout: 30
      Role: !Ref FullAccessRoleArn
      PackageType: Zip
      Handler: Identity.Functions::Identity.Functions.Functions.User.UserFunctions_Logout_Generated::Logout
      Events:
        RootPut:
          Type: HttpApi
          Properties:
            Path: /api/v1/user/logout
            Method: PUT
            ApiId: !Ref IdentityApi
  RemoveUser:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
      SyncedEvents:
        - RootDelete
    Properties:
      FunctionName: RemoveUser
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 3008
      EphemeralStorage:
        Size: 3008
      Timeout: 30
      Role: !Ref FullAccessRoleArn
      PackageType: Zip
      Handler: Identity.Functions::Identity.Functions.Functions.User.UserFunctions_RemoveUser_Generated::RemoveUser
      Events:
        RootDelete:
          Type: HttpApi
          Properties:
            Path: /api/v1/user/remove
            Method: DELETE
            ApiId: !Ref IdentityApi
  LambdaAuthorizer:
    Type: AWS::Serverless::Function
    Metadata:
      Tool: Amazon.Lambda.Annotations
    Properties:
      FunctionName: LambdaAuthorizer
      Runtime: dotnet8
      CodeUri: .
      MemorySize: 3008
      EphemeralStorage:
        Size: 3008
      Timeout: 30
      Role: !Ref FullAccessRoleArn
      PackageType: Zip
      Handler: Identity.Functions::Identity.Functions.Functions.Access.AccessFunction_FunctionHandler_Generated::FunctionHandler
Outputs:
  ApiURL:
    Description: API endpoint URL for Prod environment
    Value:
      Fn::Sub: https://${IdentityApi}.execute-api.${AWS::Region}.amazonaws.com/
  LambdaAuthorizerArn:
    Description: "The ARN of the Lambda Authorizer"
    Value: !GetAtt LambdaAuthorizer.Arn
